precision mediump float;

uniform float time;
uniform ivec2 resolution;

const float DPII = 3.14159265 * 2.0;

int GetC1(int nXOffset0or1, int t)
  {
  int nResult = 0;
  if(nXOffset0or1 == 0)
    {
    nResult = 3500 + (-3 * t);
    }
  else
    {
    nResult = 1000 + (-1 * t);
    }

  float fResult = float(nResult);
  fResult = mod(fResult, 4096.0);

  if(fResult < 0.0)
    {
    fResult += 4096.0;
    }
  nResult = int(fResult);

  return nResult;
  }

int GetC2(int nXOffset0or1, int t)
  {
  int nResult = 0;
  if(nXOffset0or1 == 0)
    {
    nResult = 2300 + (-2 * t);
    }
  else
    {
    nResult = 2000 + (-2 * t);
    }

  float fResult = float(nResult);
  fResult = mod(fResult, 4096.0);

  if(fResult < 0.0)
    {
    fResult += 4096.0;
    }
  nResult = int(fResult);

  return nResult;
  }

int GetC3(int nXOffset0or1, int t)
  {
  int nResult = 0;
  if(nXOffset0or1 == 0)
    {
    nResult = 3900 + (1 * t);
    }
  else
    {
    nResult = 3000 + (2 * t);
    }

  float fResult = float(nResult);
  fResult = mod(fResult, 4096.0);

  if(fResult < 0.0)
    {
    fResult += 4096.0;
    }
  nResult = int(fResult);

  return nResult;
  }

int GetC4(int nXOffset0or1, int t)
  {
  int nResult = 0;
  if(nXOffset0or1 == 0)
    {
    nResult = 3670 + (2 * t);
    }
  else
    {
    nResult = 4000 + (3 * t);
    }

  float fResult = float(nResult);
  fResult = mod(fResult, 4096.0);

  if(fResult < 0.0)
    {
    fResult += 4096.0;
    }
  nResult = int(fResult);

  return nResult;
  }

float Palette0_GetRed(int nIndex)
  {
  float a = 0.0;
  if((nIndex >= 0) && (nIndex < 64))
    {
    a = float(nIndex);
    }
  else if((nIndex >= 64) && (nIndex < 128))
    {
    a = float(nIndex) - 64.0;
    a = 63.0 - a;
    }
  else if((nIndex >= 128) && (nIndex < 192))
    {
    a = 0.0;
    }
  else
    {
    a = float(nIndex) - 192.0;
    }

  float fResult = cos(a * (3.1415926535 * 2.0) / 128.0 + 3.1415926535) * 31.0 + 32.0;
  fResult /= 63.0;

  return fResult;
  }

float Palette0_GetGreen(int nIndex)
  {
  float fResult = cos((3.1415926535 * 2.0) / 128.0 + 3.1415926535) * 31.0 + 32.0;
  fResult /= 63.0;

  return fResult;
  }

float Palette0_GetBlue(int nIndex)
  {
  float a = 0.0;
  if((nIndex >= 0) && (nIndex < 64))
    {
    a = 0.0;
    }
  else if((nIndex >= 64) && (nIndex < 128))
    {
    a = 0.0;
    }
  else if((nIndex >= 128) && (nIndex < 192))
    {
    a = float(nIndex) - 128.0;
    }
  else
    {
    a = float(nIndex) - 192.0;
    a = 63.0 - a;
    }

  float fResult = cos(a * (3.1415926535 * 2.0) / 128.0 + 3.1415926535) * 31.0 + 32.0;
  fResult /= 63.0;

  return fResult;
  }

void main(void)
  {
  int t = int(time * 60.0);

  float fPlasmaX = (gl_FragCoord.x / float(resolution.x)) * 399.0;
  float fPlasmaY = (gl_FragCoord.y / float(resolution.y)) * 399.0;

  float fRed = 0.0;
  float fGreen = 0.0;
  float fBlue = 0.0;

  float ah = 0.0;
  float fOffset = 0.0;
  float bx = 0.0;

  int nXOffset0or1 = int(mod(gl_FragCoord.x, 2.0));
  int xor = int(mod(gl_FragCoord.y, 2.0));
  if(xor == 1)
    {
    if(nXOffset0or1 == 0)
      {
      nXOffset0or1 = 1;
      }
    else
      {
      nXOffset0or1 = 0;
      }
    }

  fOffset = ((fPlasmaY * 2.0) + (float(GetC2(nXOffset0or1, t)) * 2.0) - (fPlasmaX / 4.0 * 8.0) + (80.0 * 8.0)) / 2.0;
  bx = ((sin(fOffset * DPII / 4096.0) * 55.0 + sin(fOffset * DPII / 4096.0 * 4.0) * 5.0 + sin(fOffset * DPII / 4096.0 * 17.0) * 3.0 + 64.0) * 16.0);

  fOffset = bx + float(GetC1(nXOffset0or1, t)) + (fPlasmaX / 4.0 * 8.0);
  ah = (sin(fOffset * DPII / 4096.0) * 55.0 + sin(fOffset * DPII / 4096.0 * 6.0) * 5.0 + sin(fOffset * DPII / 4096.0 * 21.0) * 4.0 + 64.0);

  fOffset = ((fPlasmaY * 2.0) + (float(GetC4(nXOffset0or1, t)) * 2.0) + (fPlasmaX / 4.0 * 32.0)) / 2.0;
  bx = ((sin(fOffset * DPII / 4096.0) * 55.0 + sin(fOffset * DPII / 4096.0 * 5.0) * 8.0 + sin(fOffset * DPII / 4096.0 * 15.0) * 2.0 + 64.0) * 8.0);

  fOffset = bx + (fPlasmaY * 2.0) + float(GetC3(nXOffset0or1, t)) - (fPlasmaX / 4.0 * 4.0) + (80.0 * 4.0);
  ah += (sin(fOffset * DPII / 4096.0) * 55.0 + sin(fOffset * DPII / 4096.0 * 6.0) * 5.0 + sin(fOffset * DPII / 4096.0 * 21.0) * 4.0 + 64.0);

  fRed = Palette0_GetRed(int(ah));
  fGreen = Palette0_GetGreen(int(ah));
  fBlue = Palette0_GetBlue(int(ah));

  gl_FragColor = vec4(fRed, fGreen, fBlue, 1.0);
  }
  